---

- name: Base packages
  apt:
    pkg: "{{ paperless_base_packages }}"
    state: present

- name: Custom packages
  apt:
    pkg: "{{ paperless_custom_packages }}"
    state: present

- name: "Install python2 requirements"
  apt:
    pkg:
      - "python-virtualenv"
      - "python-pip"
      - "python-setuptools"
    state: present
  when: "ansible_python_version[0] == '2'"

- name: Paperless group
  group:
    name: paperless
    state: present

- name: Paperless user
  user:
    name: paperless
    createhome: true
    group: paperless

- name: paperless consumption group
  group:
    name: "{{ paperless_consumption_dir_group }}"
    state: present

- name: paperless consumption group users
  user:
    name: "{{ item }}"
    groups: "{{ paperless_consumption_dir_group }}"
    append: true
  with_items: "{{ paperless_consumption_dir_users }}"

- name: Directories
  file:
    state: directory
    path: "{{ item }}"
    mode: 0755
    owner: paperless
    group: paperless
  with_items:
    - /opt/paperless
    - /opt/paperless/export
    - /opt/paperless/database
    - /opt/paperless/documents
    - /opt/paperless/static

- name: Consumption directory
  file:
    owner: paperless
    group: "{{ paperless_consumption_dir_group }}"
    state: directory
    mode: "{{ paperless_consumption_dir_mode }}"
    path: "{{ paperless_consumption_dir }}"

- name: Clone
  become: true
  become_user: paperless
  git:
    repo: "{{ paperless_git_url }}"
    dest: /opt/paperless/source
    force: true
    version: "{{ paperless_version }}"
  register: paperless_source
  notify: Restart Paperless

- name: Python Requirements
  pip:
    requirements: /opt/paperless/source/requirements.txt
    virtualenv: "{{ paperless_virtualenv }}"
    virtualenv_python: python3

- name: Configure
  template:
    src: "{{ paperless_configuration_template }}"
    dest: /etc/paperless.conf
    owner: paperless
    mode: g+r
  notify: Restart Paperless

- name: Migrate Database
  become: true
  become_user: paperless
  django_manage:
    command: migrate
    app_path: /opt/paperless/source/src
    virtualenv: "{{ paperless_virtualenv }}"
  environment:
    PAPERLESS_PASSPHRASE: "{{ paperless_encrypt_passphrase }}"
    PAPERLESS_SECRET_KEY: "{{ paperless_secret_key }}"

- name: Check if admin user exist
  shell: >
      set -o pipefail
      echo "from django.contrib.auth import get_user_model;
      User = get_user_model();
      print(User.objects.filter(username='{{ paperless_admin_user }}').count()>0)" |
      {{ paperless_virtualenv }}/bin/python /opt/paperless/source/src/manage.py shell
  changed_when: "'False' in admin_exist.stdout"
  register: admin_exist

- name: Create admin user
  django_manage:
    command: "createsuperuser --noinput --username={{ paperless_admin_user }} --email={{ paperless_admin_email }}"
    app_path: /opt/paperless/source/src
    virtualenv: "{{ paperless_virtualenv }}"
  when: admin_exist is changed

- name: Copy admin user password script
  template:
    src: opt/paperless/admin_password.sh
    dest: /opt/paperless/admin_password.sh
    mode: 0700
  when: admin_exist is changed

- name: Set admin user password
  command: /opt/paperless/admin_password.sh
  when: admin_exist is changed

- name: Remove admin user password script
  file:
    path: /opt/paperless/admin_password.sh
    state: absent

- name: Collect static files
  become: true
  become_user: paperless
  django_manage:
    command: collectstatic --noinput
    app_path: /opt/paperless/source/src
    virtualenv: "{{ paperless_virtualenv }}"
  when: paperless_source is changed

- name: Create systemd directory
  file:
    path: /etc/systemd/system
    state: directory

- name: Configure systemd services
  template:
    src: "etc/systemd/system/{{ item }}.service"
    dest: "/etc/systemd/system/{{ item }}.service"
  with_items:
    - paperless-web
    - paperless-consumer
  notify: Restart Paperless

- name: Start & enable systemd services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - paperless-web
    - paperless-consumer

- name: Export documents
  django_manage:
    command: "document_exporter /opt/paperless/export"
    app_path: /opt/paperless/source/src
    virtualenv: "{{ paperless_virtualenv }}"
  register: paperless_docs_export
  changed_when: not paperless_docs_export.out
  when: paperless_backup | bool

- name: Fetch export
  synchronize:
    mode: pull
    src: /opt/paperless/export/
    dest: "{{ paperless_backup_directory }}"
    recursive: true
  when: paperless_backup | bool

- name: Upload documents
  synchronize:
    mode: push
    src: "{{ paperless_backup_directory }}"
    dest: /opt/paperless/export
    recursive: true
  when: paperless_restore | bool

- name: Import documents
  django_manage:
    command: "document_importer /opt/paperless/export"
    app_path: /opt/paperless/source/src
    virtualenv: "{{ paperless_virtualenv }}"
  register: paperless_docs_import
  changed_when: "paperless_docs_import.out is defined and 'Installed 0 object' not in paperless_docs_import.out"
  when: paperless_restore | bool
